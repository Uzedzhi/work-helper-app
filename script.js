console.log('Wow its javascript');

document.addEventListener('touchmove', function(e) {
  e.preventDefault();
}, { passive: false });

document.addEventListener('wheel', function(e) {
  e.preventDefault();
}, { passive: false });










// VAPID public key –∏–∑ —à–∞–≥–∞ 2
const publicVapidKey = 'BEmCtGNaMk_6pFhZqX_Fp9_oRDjv04edkjvCZ-XprWe4Yt0fC5Xk-e-hDba6lu2NMTpKOfxj6eDK_a7pZ51Me-Y';
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');
  const rawData = atob(base64);
  return Uint8Array.from([...rawData].map(c => c.charCodeAt(0)));
}

async function initPush() {
  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
    console.warn('Push –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
    return;
  }

  // 1) –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SW
  const swReg = await navigator.serviceWorker.register('service-worker.js');
  console.log('[SW] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', swReg);

  // 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  let permission = Notification.permission;
  if (permission === 'default') {
    permission = await Notification.requestPermission();
  }
  if (permission !== 'granted') {
    console.warn('[Push] –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ:', permission);
    return;
  }

  // 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
  let subscription = await swReg.pushManager.getSubscription();
  if (subscription) {
    // –ø–æ–¥–ø–∏—Å—å —Å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º ‚Äî –Ω—É–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
    const oldKey = subscription.options.applicationServerKey;
    console.log('[Push] –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è:', oldKey);
    const successful = await subscription.unsubscribe();
    console.log('[Push] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å:', successful);
    subscription = null;
  }

  // 4) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
  subscription = await swReg.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)
  });
  console.log('[Push] –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', subscription);

  // 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º subscription –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
  await fetch('/api/save-subscription', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(subscription)
  });
  console.log('[Push] –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
initPush().catch(err => console.error('[Push] –û—à–∏–±–∫–∞ –≤ initPush:', err));









const cur = 'online';
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {

      // –û–±–Ω–æ–≤–ª—è–µ–º, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      if (cur === 'offline') {
        window.addEventListener('online', () => {
          console.log('üì° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
          registration.update();
        });
      }

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:
      registration.onupdatefound = () => {
        const newWorker = registration.installing;
        newWorker.onstatechange = () => {
          if (newWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log('üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');

              // –ü–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ auto reload)
              window.location.reload();
            }
          }
        };
      };
    });
  };