console.log('Wow its javascript');

document.addEventListener('touchmove', function(e) {
  e.preventDefault();
}, { passive: false });

document.addEventListener('wheel', function(e) {
  e.preventDefault();
}, { passive: false });










// VAPID public key –∏–∑ —à–∞–≥–∞ 2
const publicVapidKey = 'BEmCtGNaMk_6pFhZqX_Fp9_oRDjv04edkjvCZ-XprWe4Yt0fC5Xk-e-hDba6lu2NMTpKOfxj6eDK_a7pZ51Me-Y';

// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ base64 –≤ Uint8Array
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  return Uint8Array.from(rawData.split('').map(char => char.charCodeAt(0)));
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SW –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Push
document.addEventListener('DOMContentLoaded', () => {
  if ('serviceWorker' in navigator && 'PushManager' in window) {
    registerAndSubscribe().catch(console.error);
  }
});

async function registerAndSubscribe() {
  // 1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SW
  const swReg = await navigator.serviceWorker.register('service-worker.js');
  console.log('SW –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', swReg);

  // 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  let permission = Notification.permission;
  if (permission === 'default') permission = await Notification.requestPermission();
  if (permission !== 'granted') return console.warn('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

  // 3) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Push
  const subscription = await swReg.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(publicVapidKey)
  });
  console.log('–ü–æ–¥–ø–∏—Å–∫–∞:', subscription);

  // 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  await fetch('http://localhost:4000/subscribe', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(subscription)
  });
}










const cur = 'online';
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {

      // –û–±–Ω–æ–≤–ª—è–µ–º, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      if (cur === 'offline') {
        window.addEventListener('online', () => {
          console.log('üì° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
          registration.update();
        });
      }

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:
      registration.onupdatefound = () => {
        const newWorker = registration.installing;
        newWorker.onstatechange = () => {
          if (newWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log('üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');

              // –ü–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ auto reload)
              window.location.reload();
            }
          }
        };
      };
    });
  };