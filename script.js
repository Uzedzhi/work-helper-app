console.log('Wow its javascript');

document.addEventListener('touchmove', function(e) {
  e.preventDefault();
}, { passive: false });

document.addEventListener('wheel', function(e) {
  e.preventDefault();
}, { passive: false });

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/work-helper-app/service-worker.js').then(registration => {
      console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

      // –û–±–Ω–æ–≤–ª—è–µ–º, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      window.addEventListener('online', () => {
        console.log('üì° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        registration.update();
      });

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:
      registration.onupdatefound = () => {
        const newWorker = registration.installing;
        newWorker.onstatechange = () => {
          if (newWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log('üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');

              // –ü–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ auto reload)
              window.location.reload();
            }
          }
        };
      };
    });
  });
}
const firebaseConfig = {
    apiKey: "AIzaSyDI8ufxr-uyh2BEEM3CqtxivtGtW6yONe0",
    authDomain: "work-helper-app.firebaseapp.com",
    projectId: "work-helper-app",
    storageBucket: "work-helper-app.firebasestorage.app",
    messagingSenderId: "17581970290",
    appId: "1:17581970290:web:aea03338ced9c76c6743eb",
    measurementId: "G-1F10L84NKD"
  };
firebase.initializeApp(firebaseConfig)

const messaging = firebase.messaging()
Notification.requestPermission()
  .then((permission) => {
    if (permission === 'granted') {
      console.log('üîî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');

      messaging.getToken({ vapidKey: 'BFKbU1VHHoKA2ku0v9ZcgQqo3urfAadSSTY8QAs9PcnzvjnKA6BNPiuPj8JTnCC2jRhJStLUybughDfIuQrFVfk' })
        .then((currentToken) => {
          if (currentToken) {
            console.log('üéØ –¢–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', currentToken);
          } else {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.');
          }
        }).catch((err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', err);
        });

    } else {
      console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã');
    }
  });
